
(in-package #:adp-github)


(defclass located-element ()
  (source)
  (:documentation
   "An element that stores its location."))

(defgeneric process-element (element)
  (:documentation
   "Process an element.")
  (:method (element)
    (declare (ignore element))
    (values))
  (:method :before ((element located-element))
    (setf (slot-value element 'source) (get-current-file))))

(define-condition process-error (error)
  ((condition :initarg :condition)
   (form :initarg :form))
  (:report (lambda (self stream)
             (with-slots (condition form) self
               (format stream "While processing the form: ~s" form)
               (format stream "~%~a" condition)))))

(defun process-scribble-element (element)
  (let ((value (adp:element-value element))
        (form (adp:element-form element)))
    (handler-case (process-element value)
      (error (c)
        (error 'process-error :condition c :form form)))))


(defgeneric print-element (stream element)
  (:documentation
   "Prints an element."))

(defvar *print-context* nil
  "Specifies the context of the text. Valid values are :md, :html or NIL.")

(defun format-adp-md (stream object &optional colon-p at-sign-p)
  (declare (ignore colon-p at-sign-p))
  (let* ((*print-case* :downcase)
         (*print-escape* t)
         (*print-shortest-package* t)
         (*print-gensym-numbers* t)
         (*print-context* :md))
    (print-element stream object)))

(defun format-adp-html (stream object &optional colon-p at-sign-p)
  (declare (ignore colon-p at-sign-p))
  (let* ((*print-case* :downcase)
         (*print-escape* t)
         (*print-shortest-package* t)
         (*print-gensym-numbers* t)
         (*print-context* :html))
    (print-element stream object)))

(defun format-adp-nil (stream object &optional colon-p at-sign-p)
  (declare (ignore colon-p at-sign-p))
  (let* ((*print-case* :downcase)
         (*print-escape* t)
         (*print-shortest-package* t)
         (*print-gensym-numbers* t)
         (*print-context* nil))
    (print-element stream object)))

(defun format-api-md (stream object &optional colon-p at-sign-p)
  (declare (ignore colon-p at-sign-p))
  (let* ((*print-case* :downcase)
         (*print-escape* nil)
         (*print-shortest-package* t)
         (*print-gensym-numbers* nil)
         (*print-context* :md))
    (print-element stream object)))

(defun format-api-html (stream object &optional colon-p at-sign-p)
  (declare (ignore colon-p at-sign-p))
  (let* ((*print-case* :downcase)
         (*print-escape* nil)
         (*print-shortest-package* t)
         (*print-gensym-numbers* nil)
         (*print-context* :html))
    (print-element stream object)))

(defun format-api-nil (stream object &optional colon-p at-sign-p)
  (declare (ignore colon-p at-sign-p))
  (let* ((*print-case* :downcase)
         (*print-escape* nil)
         (*print-shortest-package* t)
         (*print-gensym-numbers* nil)
         (*print-context* nil))
    (print-element stream object)))

(defun format-lisp-md (stream object &optional colon-p at-sign-p)
  (declare (ignore colon-p at-sign-p))
  (let* ((*print-case* :upcase)
         (*print-escape* t)
         (*print-shortest-package* nil)
         (*print-gensym-numbers* t)
         (*print-context* :md))
    (print-element stream object)))

(defun format-lisp-html (stream object &optional colon-p at-sign-p)
  (declare (ignore colon-p at-sign-p))
  (let* ((*print-case* :upcase)
         (*print-escape* t)
         (*print-shortest-package* nil)
         (*print-gensym-numbers* t)
         (*print-context* :html))
    (print-element stream object)))

(defun format-lisp-nil (stream object &optional colon-p at-sign-p)
  (declare (ignore colon-p at-sign-p))
  (let* ((*print-case* :upcase)
         (*print-escape* t)
         (*print-shortest-package* nil)
         (*print-gensym-numbers* t)
         (*print-context* nil))
    (print-element stream object)))
